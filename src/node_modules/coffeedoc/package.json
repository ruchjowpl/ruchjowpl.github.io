{
  "name": "coffeedoc",
  "description": "An API documentation generator for CoffeeScript",
  "keywords": [
    "documentation",
    "docs",
    "generator",
    "coffeescript"
  ],
  "author": {
    "name": "Omar Khan"
  },
  "version": "0.2.11",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/mit-license.php"
    }
  ],
  "engines": {
    "node": ">=0.4.10"
  },
  "dependencies": {
    "coffee-script": ">=1.5.0",
    "eco": ">=1.1.0-rc-1",
    "optimist": ">=0.3.1",
    "highlight": ">=0.2.2",
    "traverse": ">=0.6.1",
    "marked": ">=0.2.5"
  },
  "bin": {
    "coffeedoc": "./bin/coffeedoc"
  },
  "devDependencies": {
    "jasmine-node": ">=1.0.6"
  },
  "optionalDependencies": {},
  "scripts": {
    "test": "cake test"
  },
  "readme": "CoffeeDoc\n=========\n\nAn API documentation generator for CoffeeScript\n-----------------------------------------------\n\nCoffeeDoc is a simple API documentation generator for [CoffeeScript][]. It reads\npython-style docstrings in your CoffeeScript class and function definitions,\npasses them through [Markdown][] and outputs the result as easy to read HTML.\n\nThanks to [apgwoz](https://github.com/apgwoz), CoffeeDoc can also generate [wiki\npages for Github](https://github.com/apgwoz/coffeedoc-hub/wiki/Src:Coffeedoc)!\n\nCoffeeDoc can also return your documentation as JSON, so you can run it through\nan external documentation system such as [Sphinx][].\n\nCoffeeDoc is inspired by the excellent [Docco][], and is intended for projects\nthat require more structured API documentation.\n\nThe docstring convention CoffeeDoc uses is inspired by Python, and looks like\nthis:\n\n```coffeescript\n###\n# CoffeeDoc example documentation #\n\nThis is a module-level docstring, and will be displayed at the top of the module documentation.\nDocumentation generated by [CoffeeDoc](http://github.com/omarkhan/coffeedoc)\n###\n\nclass MyClass extends Superclass\n    ###\n    This docstring documents MyClass. It can include *Markdown* syntax,\n    which will be converted to html.\n    ###\n    constructor: (@args) ->\n        ### Constructor documentation goes here. ###\n\n    method: (args) ->\n        ### This is a method of MyClass ###\n\nmyFunc = (arg1, arg2, args...) ->\n    ###\n    This function will be documented by CoffeeDoc\n    ###\n    doSomething()\n```\n\nThe documentation generated from the above script can be seen\n[here](http://omarkhan.github.com/coffeedoc/test/example.coffee.html). For a\nmore interesting example, here is [the result of running coffeedoc against\n`src/coffeedoc.coffee`](http://omarkhan.github.com/coffeedoc/src/coffeedoc.coffee.html).\n\n### Installation ###\n\nCoffeeDoc requires [Node.js][], [CoffeeScript][], [eco][], and [optimist][].\nInstall using npm with the following command:\n\n    sudo npm install -g coffeedoc\n\nThe -g option installs CoffeeDoc globally, adding the coffeedoc executable to\nyour PATH. If you would rather install locally, omit the -g option.\n\nYou can also install from source using cake. From the source directory, run:\n\n    sudo cake install\n\n### Usage ###\n\nCoffeeDoc can be run from the command line:\n\n    Usage: coffeedoc [options] [targets]\n\n    Options:\n      --output, -o    Set output directory                                   [default: \"docs\"]\n      --parser        Parser to use. Available parsers: commonjs, requirejs  [default: \"commonjs\"]\n      --renderer      Renderer to use. Available renderers: html, gfm, json  [default: \"html\"]\n      --stdout        Direct all output to stdout instead of files           [boolean]\n      --ignore, -i    Files or directories to ignore                       \n      --help, -h      Show this help                                       \n      --hide-private  Do not document methods beginning with an underscore   [boolean]\n\nIf [targets] is a directory, CoffeeDoc will recursively document all `.coffee`\nfiles found under that directory.\n\nIf you wish to document several modules, make sure you generate all\nthe docs with a single command -- this ensures that they will all appear in the\n`index.html` file.\n\n#### Note on Markdown headers ####\n\nMarkdown uses `#` characters for headers, e.g.\n\n    # Header 1\n    ## Header 2\n    ### Header 3\n    #### Header 4\n    ##### Header 5\n    ###### Header 6\n\nAs using a sequence of 3 or more `#` characters within a CoffeeScript block\ncomment would end the comment block, CoffeeDoc allows for the `\\#` escape\nsequence in docstrings. So instead of `### Header`, use `\\#\\#\\# Header` or\n`##\\# Header`. Ugly, but it works.\n\n### How it works ###\n\nCoffeeDoc uses the CoffeeScript parser to generate a parse tree for the given\nsource files. It then extracts the relevant information from the parse tree:\nclass and function names, class member functions, function argument lists and\ndocstrings.\n\nDocstrings are defined as the first herecomment block following the class or\nfunction definition. Note that regular single line comments will be ignored.\n\nThe resulting documentation information is then passed to an [eco][] template\nto generate the html output.\n\n### TODO ###\n\n- Doctests\n\n### Alternatives ###\n\n- [Docco][] for literate programming style docs.\n- [Codo][] for something more ruby than python.\n\n### Licence ###\n\nCoffeeDoc is Â© 2012 Omar Khan, released under the MIT licence. Use it, fork it.\n\n[CoffeeScript]: http://jashkenas.github.com/coffee-script/\n[Sphinx]: http://sphinx.pocoo.org/\n[Docco]: http://jashkenas.github.com/docco/\n[Node.js]: http://nodejs.org/\n[eco]: http://github.com/sstephenson/eco\n[optimist]: http://github.com/substack/node-optimist\n[Markdown]: http://daringfireball.net/projects/markdown/\n[Codo]: http://github.com/netzpirat/codo\n",
  "readmeFilename": "README.md",
  "_id": "coffeedoc@0.2.11",
  "dist": {
    "shasum": "9aabb3bdfdb6075fbb73a494d8d59d52b30e894a"
  },
  "_from": "coffeedoc@~0.2.8",
  "_resolved": "https://registry.npmjs.org/coffeedoc/-/coffeedoc-0.2.11.tgz"
}
